/* */ 
var ts = require('typescript');
var logger_1 = require('./logger');
var compiler_host_1 = require('./compiler-host');
var transpiler_1 = require('./transpiler');
var type_checker_1 = require('./type-checker');
var format_errors_1 = require('./format-errors');
var utils_1 = require("./utils");
var logger = new logger_1.default({ debug: false });
function createFactory(sjsconfig, _resolve, _fetch) {
    if (sjsconfig === void 0) { sjsconfig = {}; }
    var tsconfigFiles = [];
    var typingsFiles = [];
    return loadOptions(sjsconfig, _resolve, _fetch)
        .then(function (options) {
        return createServices(options, _resolve, _fetch);
    })
        .then(function (services) {
        if (services.options.typeCheck) {
            return resolveDeclarationFiles(services.options, _resolve)
                .then(function (resolvedFiles) {
                resolvedFiles.forEach(function (resolvedFile) {
                    services.typeChecker.registerDeclarationFile(resolvedFile, false);
                });
                return services;
            });
        }
        else {
            return services;
        }
    });
}
exports.createFactory = createFactory;
function loadOptions(sjsconfig, _resolve, _fetch) {
    if (sjsconfig.tsconfig) {
        var tsconfig = (sjsconfig.tsconfig === true) ? "tsconfig.json" : sjsconfig.tsconfig;
        return _resolve(tsconfig)
            .then(function (tsconfigAddress) {
            return _fetch(tsconfigAddress).then(function (tsconfigText) { return ({ tsconfigText: tsconfigText, tsconfigAddress: tsconfigAddress }); });
        })
            .then(function (_a) {
            var tsconfigAddress = _a.tsconfigAddress, tsconfigText = _a.tsconfigText;
            var ts1 = ts;
            var result = ts1.parseConfigFileText ?
                ts1.parseConfigFileText(tsconfigAddress, tsconfigText) :
                ts1.parseConfigFileTextToJson(tsconfigAddress, tsconfigText);
            if (result.error) {
                format_errors_1.formatErrors([result.error], logger);
                throw new Error("failed to load tsconfig from " + tsconfigAddress);
            }
            var files = result.config.files;
            return ts.extend(ts.extend({ tsconfigAddress: tsconfigAddress, files: files }, sjsconfig), result.config.compilerOptions);
        });
    }
    else {
        return Promise.resolve(sjsconfig);
    }
}
function resolveDeclarationFiles(options, _resolve) {
    var files = options.files || [];
    var declarationFiles = files
        .filter(function (filename) { return utils_1.isTypescriptDeclaration(filename); })
        .map(function (filename) { return _resolve(filename, options.tsconfigAddress); });
    return Promise.all(declarationFiles);
}
function createServices(options, _resolve, _fetch) {
    var host = new compiler_host_1.CompilerHost(options);
    var transpiler = new transpiler_1.Transpiler(host);
    var typeChecker = undefined;
    if (options.typeCheck) {
        typeChecker = new type_checker_1.TypeChecker(host, _resolve, _fetch);
        if (!host.options.noLib) {
            return _resolve('ts', '')
                .then(function (moduleName) {
                return _resolve(host.getDefaultLibFileName(), moduleName);
            })
                .then(function (defaultLibAddress) {
                typeChecker.registerDeclarationFile(defaultLibAddress, true);
                return { transpiler: transpiler, typeChecker: typeChecker, host: host, options: options };
            });
        }
    }
    return Promise.resolve({ transpiler: transpiler, typeChecker: typeChecker, host: host, options: options });
}
//# sourceMappingURL=data:application/json;base64,